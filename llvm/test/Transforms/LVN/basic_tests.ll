; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 3
; RUN: opt -passes='lvn,dce' -S < %s | FileCheck %s

define i32 @redundant_add(i32 %a, i32 %b, i32  %c) {
; CHECK-LABEL: define i32 @redundant_add(
; CHECK-SAME: i32 [[A:%.*]], i32 [[B:%.*]], i32 [[C:%.*]]) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[ADD:%.*]] = add i32 [[A]], [[B]]
; CHECK-NEXT:    [[MUL:%.*]] = mul i32 [[B]], [[C]]
; CHECK-NEXT:    [[MUL2:%.*]] = mul i32 [[ADD]], [[MUL]]
; CHECK-NEXT:    [[ADD2:%.*]] = add i32 [[MUL2]], [[ADD]]
; CHECK-NEXT:    ret i32 [[ADD2]]
;
entry:
  %add = add i32 %a, %b
  %mul = mul i32 %b, %c
  %add1 = add i32 %a, %b
  %mul2 = mul i32 %add, %mul
  %add2 = add i32 %mul2, %add1
  ret i32 %add2
}

define i32 @redundant_mul(i32 noundef %a, i32 noundef %b, i32 noundef %c) {
; CHECK-LABEL: define i32 @redundant_mul(
; CHECK-SAME: i32 noundef [[A:%.*]], i32 noundef [[B:%.*]], i32 noundef [[C:%.*]]) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[ADD:%.*]] = add i32 [[A]], [[B]]
; CHECK-NEXT:    [[MUL:%.*]] = mul i32 [[B]], [[C]]
; CHECK-NEXT:    [[MUL2:%.*]] = mul i32 [[ADD]], [[MUL]]
; CHECK-NEXT:    [[ADD1:%.*]] = add i32 [[MUL2]], [[MUL]]
; CHECK-NEXT:    ret i32 [[ADD1]]
;
entry:
  %add = add i32 %a, %b
  %mul = mul i32 %b, %c
  %mul1 = mul i32 %b, %c
  %mul2 = mul i32 %add, %mul
  %add1 = add i32 %mul2, %mul1
  ret i32 %add1
}

define i32 @redundant_add_x2(i32 noundef %a, i32 noundef %b, i32 noundef %c) {
; CHECK-LABEL: define i32 @redundant_add_x2(
; CHECK-SAME: i32 noundef [[A:%.*]], i32 noundef [[B:%.*]], i32 noundef [[C:%.*]]) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[ADD:%.*]] = add i32 [[A]], [[B]]
; CHECK-NEXT:    [[MUL:%.*]] = mul i32 [[B]], [[C]]
; CHECK-NEXT:    [[MUL2:%.*]] = mul i32 [[ADD]], [[MUL]]
; CHECK-NEXT:    [[ADD2:%.*]] = add i32 [[MUL2]], [[ADD]]
; CHECK-NEXT:    [[ADD4:%.*]] = add i32 [[ADD2]], [[ADD]]
; CHECK-NEXT:    ret i32 [[ADD4]]
;
entry:
  %add = add i32 %a, %b
  %mul = mul i32 %b, %c
  %add1 = add i32 %a, %b
  %mul2 = mul i32 %add, %mul
  %add2 = add i32 %mul2, %add1
  %add3 = add i32 %a, %b
  %add4 = add i32 %add2, %add3
  ret i32 %add4
}
